
0802 LCD Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002dac  08002dac  00003dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002de4  08002de4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002de4  08002de4  00003de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002de8  08002de8  00003de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002df8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002df8  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009770  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177c  00000000  00000000  0000d7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005aa  00000000  00000000  0000f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a61b  00000000  00000000  0000fc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a459  00000000  00000000  0002a265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a037  00000000  00000000  000346be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d2c  00000000  00000000  000ce738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000d0464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d94 	.word	0x08002d94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002d94 	.word	0x08002d94

080001c8 <ADM0802A_Init>:

/*
 * INITIALIZATION
 */

uint8_t ADM0802A_Init () {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	// Cursor to move right, DDRAM addr is increased by 1, and no display shift
	ADM0802A_CommandWrite (ADM0802A_COMMAND_ENTRY_MODE (1, 0));
 80001cc:	2006      	movs	r0, #6
 80001ce:	f000 f80d 	bl	80001ec <ADM0802A_CommandWrite>

	// Turn on display, cursor is enabled, and blink is enabled
	ADM0802A_CommandWrite (ADM0802A_COMMAND_DISPLAY_CONTROL (1, 1, 1));
 80001d2:	200f      	movs	r0, #15
 80001d4:	f000 f80a 	bl	80001ec <ADM0802A_CommandWrite>

	// Cursor and display shift are left off
	// 8-bit bus mode is used, 2-line display mode is used, and 5x8 dot display format is used
	ADM0802A_CommandWrite (ADM0802A_COMMAND_FUNCTION_SET (1, 1, 0));
 80001d8:	2038      	movs	r0, #56	@ 0x38
 80001da:	f000 f807 	bl	80001ec <ADM0802A_CommandWrite>

	// Clear Display and return to home
	ADM0802A_CommandWrite (ADM0802A_COMMAND_CLEAR_DISPLAY);
 80001de:	2001      	movs	r0, #1
 80001e0:	f000 f804 	bl	80001ec <ADM0802A_CommandWrite>

	return 0;
 80001e4:	2300      	movs	r3, #0
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <ADM0802A_CommandWrite>:

/*
 * COMMAND FUNCTIONS
 */

void ADM0802A_CommandWrite (uint8_t command) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	// Write the command to the data bus
	HAL_GPIO_WritePin (Port_DB0, Pin_DB0,  command & 0x01);
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	461a      	mov	r2, r3
 8000200:	2140      	movs	r1, #64	@ 0x40
 8000202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000206:	f000 ff69 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB1, Pin_DB1, (command >> 1) & 0x01);
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	085b      	lsrs	r3, r3, #1
 800020e:	b2db      	uxtb	r3, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	b2db      	uxtb	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	2180      	movs	r1, #128	@ 0x80
 800021a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021e:	f000 ff5d 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB2, Pin_DB2, (command >> 2) & 0x01);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	089b      	lsrs	r3, r3, #2
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	2101      	movs	r1, #1
 8000232:	484a      	ldr	r0, [pc, #296]	@ (800035c <ADM0802A_CommandWrite+0x170>)
 8000234:	f000 ff52 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB3, Pin_DB3, (command >> 3) & 0x01);
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	08db      	lsrs	r3, r3, #3
 800023c:	b2db      	uxtb	r3, r3
 800023e:	f003 0301 	and.w	r3, r3, #1
 8000242:	b2db      	uxtb	r3, r3
 8000244:	461a      	mov	r2, r3
 8000246:	2102      	movs	r1, #2
 8000248:	4844      	ldr	r0, [pc, #272]	@ (800035c <ADM0802A_CommandWrite+0x170>)
 800024a:	f000 ff47 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB4, Pin_DB4, (command >> 4) & 0x01);
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	091b      	lsrs	r3, r3, #4
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	461a      	mov	r2, r3
 800025c:	2104      	movs	r1, #4
 800025e:	483f      	ldr	r0, [pc, #252]	@ (800035c <ADM0802A_CommandWrite+0x170>)
 8000260:	f000 ff3c 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB5, Pin_DB5, (command >> 5) & 0x01);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	095b      	lsrs	r3, r3, #5
 8000268:	b2db      	uxtb	r3, r3
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000276:	4839      	ldr	r0, [pc, #228]	@ (800035c <ADM0802A_CommandWrite+0x170>)
 8000278:	f000 ff30 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB6, Pin_DB6, (command >> 6) & 0x01);
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	099b      	lsrs	r3, r3, #6
 8000280:	b2db      	uxtb	r3, r3
 8000282:	f003 0301 	and.w	r3, r3, #1
 8000286:	b2db      	uxtb	r3, r3
 8000288:	461a      	mov	r2, r3
 800028a:	2110      	movs	r1, #16
 800028c:	4834      	ldr	r0, [pc, #208]	@ (8000360 <ADM0802A_CommandWrite+0x174>)
 800028e:	f000 ff25 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB7, Pin_DB7, (command >> 7) & 0x01);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	09db      	lsrs	r3, r3, #7
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2120      	movs	r1, #32
 800029c:	4830      	ldr	r0, [pc, #192]	@ (8000360 <ADM0802A_CommandWrite+0x174>)
 800029e:	f000 ff1d 	bl	80010dc <HAL_GPIO_WritePin>

	// Toggle Enable pin to let device receive the information
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2120      	movs	r1, #32
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002aa:	f000 ff17 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_Delay (1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f000 fbd4 	bl	8000a5c <HAL_Delay>
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_SET);
 80002b4:	2201      	movs	r2, #1
 80002b6:	2120      	movs	r1, #32
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f000 ff0e 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_Delay (1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 fbcb 	bl	8000a5c <HAL_Delay>
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2120      	movs	r1, #32
 80002ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ce:	f000 ff05 	bl	80010dc <HAL_GPIO_WritePin>

	// Delay to let instruction be executed according to Instruction table p.8
	if (command >> 7)			HAL_Delay (12);
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	da03      	bge.n	80002e2 <ADM0802A_CommandWrite+0xf6>
 80002da:	200c      	movs	r0, #12
 80002dc:	f000 fbbe 	bl	8000a5c <HAL_Delay>
	else if (command >> 4) 		HAL_Delay (12);
	else if (command >> 3) 		HAL_Delay (12);
	else if (command >> 2) 		HAL_Delay (12);
	else if (command >> 1) 		HAL_Delay (46);
	else						HAL_Delay (46);
}
 80002e0:	e038      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 6) 		HAL_Delay (12);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	099b      	lsrs	r3, r3, #6
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d003      	beq.n	80002f4 <ADM0802A_CommandWrite+0x108>
 80002ec:	200c      	movs	r0, #12
 80002ee:	f000 fbb5 	bl	8000a5c <HAL_Delay>
}
 80002f2:	e02f      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 5) 		HAL_Delay (12);
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d003      	beq.n	8000306 <ADM0802A_CommandWrite+0x11a>
 80002fe:	200c      	movs	r0, #12
 8000300:	f000 fbac 	bl	8000a5c <HAL_Delay>
}
 8000304:	e026      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 4) 		HAL_Delay (12);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	091b      	lsrs	r3, r3, #4
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d003      	beq.n	8000318 <ADM0802A_CommandWrite+0x12c>
 8000310:	200c      	movs	r0, #12
 8000312:	f000 fba3 	bl	8000a5c <HAL_Delay>
}
 8000316:	e01d      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 3) 		HAL_Delay (12);
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	08db      	lsrs	r3, r3, #3
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <ADM0802A_CommandWrite+0x13e>
 8000322:	200c      	movs	r0, #12
 8000324:	f000 fb9a 	bl	8000a5c <HAL_Delay>
}
 8000328:	e014      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 2) 		HAL_Delay (12);
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	089b      	lsrs	r3, r3, #2
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d003      	beq.n	800033c <ADM0802A_CommandWrite+0x150>
 8000334:	200c      	movs	r0, #12
 8000336:	f000 fb91 	bl	8000a5c <HAL_Delay>
}
 800033a:	e00b      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else if (command >> 1) 		HAL_Delay (46);
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	085b      	lsrs	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <ADM0802A_CommandWrite+0x162>
 8000346:	202e      	movs	r0, #46	@ 0x2e
 8000348:	f000 fb88 	bl	8000a5c <HAL_Delay>
}
 800034c:	e002      	b.n	8000354 <ADM0802A_CommandWrite+0x168>
	else						HAL_Delay (46);
 800034e:	202e      	movs	r0, #46	@ 0x2e
 8000350:	f000 fb84 	bl	8000a5c <HAL_Delay>
}
 8000354:	bf00      	nop
 8000356:	3708      	adds	r7, #8
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000400 	.word	0x48000400
 8000360:	48000800 	.word	0x48000800

08000364 <ADM0802A_DataWrite>:

/*
 * DATA FUNCTIONS
 */

void ADM0802A_DataWrite (char character, bool upper_set) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	460a      	mov	r2, r1
 800036e:	71fb      	strb	r3, [r7, #7]
 8000370:	4613      	mov	r3, r2
 8000372:	71bb      	strb	r3, [r7, #6]
	// Toggle RS pin to high to enable writing to RAM
	HAL_GPIO_WritePin (Port_RS, Pin_RS, GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2102      	movs	r1, #2
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f000 feae 	bl	80010dc <HAL_GPIO_WritePin>

	// Translate the character into the encoding from p.9
	uint8_t value = CharToEncoding (character, 0);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f881 	bl	800048c <CharToEncoding>
 800038a:	4603      	mov	r3, r0
 800038c:	73fb      	strb	r3, [r7, #15]

	// Writ the value to the data bus
	HAL_GPIO_WritePin (Port_DB0, Pin_DB0,  value & 0x01);
 800038e:	7bfb      	ldrb	r3, [r7, #15]
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	2140      	movs	r1, #64	@ 0x40
 800039a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800039e:	f000 fe9d 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB1, Pin_DB1, (value >> 1) & 0x01);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	085b      	lsrs	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	f003 0301 	and.w	r3, r3, #1
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	461a      	mov	r2, r3
 80003b0:	2180      	movs	r1, #128	@ 0x80
 80003b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003b6:	f000 fe91 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB2, Pin_DB2, (value >> 2) & 0x01);
 80003ba:	7bfb      	ldrb	r3, [r7, #15]
 80003bc:	089b      	lsrs	r3, r3, #2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	2101      	movs	r1, #1
 80003ca:	482e      	ldr	r0, [pc, #184]	@ (8000484 <ADM0802A_DataWrite+0x120>)
 80003cc:	f000 fe86 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB3, Pin_DB3, (value >> 3) & 0x01);
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	2102      	movs	r1, #2
 80003e0:	4828      	ldr	r0, [pc, #160]	@ (8000484 <ADM0802A_DataWrite+0x120>)
 80003e2:	f000 fe7b 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB4, Pin_DB4, (value >> 4) & 0x01);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	091b      	lsrs	r3, r3, #4
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	2104      	movs	r1, #4
 80003f6:	4823      	ldr	r0, [pc, #140]	@ (8000484 <ADM0802A_DataWrite+0x120>)
 80003f8:	f000 fe70 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB5, Pin_DB5, (value >> 5) & 0x01);
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	095b      	lsrs	r3, r3, #5
 8000400:	b2db      	uxtb	r3, r3
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	b2db      	uxtb	r3, r3
 8000408:	461a      	mov	r2, r3
 800040a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800040e:	481d      	ldr	r0, [pc, #116]	@ (8000484 <ADM0802A_DataWrite+0x120>)
 8000410:	f000 fe64 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB6, Pin_DB6, (value >> 6) & 0x01);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	099b      	lsrs	r3, r3, #6
 8000418:	b2db      	uxtb	r3, r3
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	b2db      	uxtb	r3, r3
 8000420:	461a      	mov	r2, r3
 8000422:	2110      	movs	r1, #16
 8000424:	4818      	ldr	r0, [pc, #96]	@ (8000488 <ADM0802A_DataWrite+0x124>)
 8000426:	f000 fe59 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Port_DB7, Pin_DB7, (value >> 7) & 0x01);
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	09db      	lsrs	r3, r3, #7
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	2120      	movs	r1, #32
 8000434:	4814      	ldr	r0, [pc, #80]	@ (8000488 <ADM0802A_DataWrite+0x124>)
 8000436:	f000 fe51 	bl	80010dc <HAL_GPIO_WritePin>

	// Toggle Enable pin to let device receive the information
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	2120      	movs	r1, #32
 800043e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000442:	f000 fe4b 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fb08 	bl	8000a5c <HAL_Delay>
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2120      	movs	r1, #32
 8000450:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000454:	f000 fe42 	bl	80010dc <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000458:	2001      	movs	r0, #1
 800045a:	f000 faff 	bl	8000a5c <HAL_Delay>
	HAL_GPIO_WritePin (Port_E, Pin_E, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2120      	movs	r1, #32
 8000462:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000466:	f000 fe39 	bl	80010dc <HAL_GPIO_WritePin>

	// Delay to let instruction be executed according to Instruction table p.8
	HAL_Delay (12);
 800046a:	200c      	movs	r0, #12
 800046c:	f000 faf6 	bl	8000a5c <HAL_Delay>

	// Toggle RS pin to low
	HAL_GPIO_TogglePin (Port_RS, Pin_RS);
 8000470:	2102      	movs	r1, #2
 8000472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000476:	f000 fe49 	bl	800110c <HAL_GPIO_TogglePin>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	48000400 	.word	0x48000400
 8000488:	48000800 	.word	0x48000800

0800048c <CharToEncoding>:

static inline uint8_t CharToEncoding (char character, bool upper_set) {
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	460a      	mov	r2, r1
 8000496:	71fb      	strb	r3, [r7, #7]
 8000498:	4613      	mov	r3, r2
 800049a:	71bb      	strb	r3, [r7, #6]
	return (upper_set) ? (0x80 | character) : (character);
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <CharToEncoding+0x20>
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	e000      	b.n	80004ae <CharToEncoding+0x22>
 80004ac:	79fb      	ldrb	r3, [r7, #7]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fa66 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f842 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f8d6 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004cc:	f000 f8a4 	bl	8000618 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80004d0:	f000 f878 	bl	80005c4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Init (&hdac);
 80004d4:	481c      	ldr	r0, [pc, #112]	@ (8000548 <main+0x8c>)
 80004d6:	f000 fbca 	bl	8000c6e <HAL_DAC_Init>
  HAL_DAC_Start (&hdac, DAC_CHANNEL_1);
 80004da:	2100      	movs	r1, #0
 80004dc:	481a      	ldr	r0, [pc, #104]	@ (8000548 <main+0x8c>)
 80004de:	f000 fc07 	bl	8000cf0 <HAL_DAC_Start>

  ADM0802A_Init ();
 80004e2:	f7ff fe71 	bl	80001c8 <ADM0802A_Init>

  // Set CA to 3.3V/2
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 80004e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	4816      	ldr	r0, [pc, #88]	@ (8000548 <main+0x8c>)
 80004f0:	f000 fbdf 	bl	8000cb2 <HAL_DAC_SetValue>


  HAL_Delay (1000);
 80004f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004f8:	f000 fab0 	bl	8000a5c <HAL_Delay>
  ADM0802A_DataWrite ('H', false);
 80004fc:	2100      	movs	r1, #0
 80004fe:	2048      	movs	r0, #72	@ 0x48
 8000500:	f7ff ff30 	bl	8000364 <ADM0802A_DataWrite>
  HAL_Delay (500);
 8000504:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000508:	f000 faa8 	bl	8000a5c <HAL_Delay>
  ADM0802A_DataWrite ('E', false);
 800050c:	2100      	movs	r1, #0
 800050e:	2045      	movs	r0, #69	@ 0x45
 8000510:	f7ff ff28 	bl	8000364 <ADM0802A_DataWrite>
  HAL_Delay (500);
 8000514:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000518:	f000 faa0 	bl	8000a5c <HAL_Delay>
  ADM0802A_DataWrite ('L', false);
 800051c:	2100      	movs	r1, #0
 800051e:	204c      	movs	r0, #76	@ 0x4c
 8000520:	f7ff ff20 	bl	8000364 <ADM0802A_DataWrite>
  HAL_Delay (500);
 8000524:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000528:	f000 fa98 	bl	8000a5c <HAL_Delay>
  ADM0802A_DataWrite ('L', false);
 800052c:	2100      	movs	r1, #0
 800052e:	204c      	movs	r0, #76	@ 0x4c
 8000530:	f7ff ff18 	bl	8000364 <ADM0802A_DataWrite>
  HAL_Delay (500);
 8000534:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000538:	f000 fa90 	bl	8000a5c <HAL_Delay>
  ADM0802A_DataWrite ('0', false);
 800053c:	2100      	movs	r1, #0
 800053e:	2030      	movs	r0, #48	@ 0x30
 8000540:	f7ff ff10 	bl	8000364 <ADM0802A_DataWrite>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x88>
 8000548:	20000028 	.word	0x20000028

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b090      	sub	sp, #64	@ 0x40
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	2228      	movs	r2, #40	@ 0x28
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fbed 	bl	8002d3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056e:	2302      	movs	r3, #2
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000576:	2310      	movs	r3, #16
 8000578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fddc 	bl	8001140 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800058e:	f000 f8e9 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe06 	bl	80021bc <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005b6:	f000 f8d5 	bl	8000764 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3740      	adds	r7, #64	@ 0x40
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_DAC_Init+0x4c>)
 80005d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <MX_DAC_Init+0x50>)
 80005d8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005da:	480d      	ldr	r0, [pc, #52]	@ (8000610 <MX_DAC_Init+0x4c>)
 80005dc:	f000 fb47 	bl	8000c6e <HAL_DAC_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80005e6:	f000 f8bd 	bl	8000764 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_DAC_Init+0x4c>)
 80005fa:	f000 fbb0 	bl	8000d5e <HAL_DAC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000604:	f000 f8ae 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	40007400 	.word	0x40007400

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 800061e:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <MX_USART2_UART_Init+0x5c>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000624:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_USART2_UART_Init+0x58>)
 800065c:	f001 ffce 	bl	80025fc <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 f87d 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000003c 	.word	0x2000003c
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b32      	ldr	r3, [pc, #200]	@ (8000758 <MX_GPIO_Init+0xe0>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a31      	ldr	r2, [pc, #196]	@ (8000758 <MX_GPIO_Init+0xe0>)
 8000694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000698:	6153      	str	r3, [r2, #20]
 800069a:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <MX_GPIO_Init+0xe0>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	4a2b      	ldr	r2, [pc, #172]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006b0:	6153      	str	r3, [r2, #20]
 80006b2:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006c8:	6153      	str	r3, [r2, #20]
 80006ca:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_GPIO_Init+0xe0>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RW_Pin|RS_Pin|E_Pin|DB0_Pin
 80006d6:	2200      	movs	r2, #0
 80006d8:	21e3      	movs	r1, #227	@ 0xe3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f000 fcfd 	bl	80010dc <HAL_GPIO_WritePin>
                          |DB1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DB6_Pin|DB7_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2130      	movs	r1, #48	@ 0x30
 80006e6:	481d      	ldr	r0, [pc, #116]	@ (800075c <MX_GPIO_Init+0xe4>)
 80006e8:	f000 fcf8 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin, GPIO_PIN_RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f240 4107 	movw	r1, #1031	@ 0x407
 80006f2:	481b      	ldr	r0, [pc, #108]	@ (8000760 <MX_GPIO_Init+0xe8>)
 80006f4:	f000 fcf2 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RW_Pin RS_Pin E_Pin DB0_Pin
                           DB1_Pin */
  GPIO_InitStruct.Pin = RW_Pin|RS_Pin|E_Pin|DB0_Pin
 80006f8:	23e3      	movs	r3, #227	@ 0xe3
 80006fa:	60fb      	str	r3, [r7, #12]
                          |DB1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000712:	f000 fb71 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB6_Pin DB7_Pin */
  GPIO_InitStruct.Pin = DB6_Pin|DB7_Pin;
 8000716:	2330      	movs	r3, #48	@ 0x30
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <MX_GPIO_Init+0xe4>)
 800072e:	f000 fb63 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB2_Pin DB3_Pin DB4_Pin DB5_Pin */
  GPIO_InitStruct.Pin = DB2_Pin|DB3_Pin|DB4_Pin|DB5_Pin;
 8000732:	f240 4307 	movw	r3, #1031	@ 0x407
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_GPIO_Init+0xe8>)
 800074c:	f000 fb54 	bl	8000df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3720      	adds	r7, #32
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000800 	.word	0x48000800
 8000760:	48000400 	.word	0x48000400

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <Error_Handler+0x8>

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	61d3      	str	r3, [r2, #28]
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x44>)
 800079c:	69db      	ldr	r3, [r3, #28]
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a15      	ldr	r2, [pc, #84]	@ (800082c <HAL_DAC_MspInit+0x74>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d124      	bne.n	8000824 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 80007e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007fc:	6153      	str	r3, [r2, #20]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_DAC_MspInit+0x78>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = CA_Pin;
 800080a:	2310      	movs	r3, #16
 800080c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080e:	2303      	movs	r3, #3
 8000810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CA_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000820:	f000 faea 	bl	8000df8 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40007400 	.word	0x40007400
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0x7c>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d128      	bne.n	80008a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000878:	6153      	str	r3, [r2, #20]
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_UART_MspInit+0x80>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000886:	230c      	movs	r3, #12
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000896:	2307      	movs	r3, #7
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f000 faa8 	bl	8000df8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f885 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000974 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000940:	f7ff ffea 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	@ (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <LoopForever+0xe>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	@ (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f002 f9ef 	bl	8002d4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096e:	f7ff fda5 	bl	80004bc <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000974:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000980:	08002dec 	.word	0x08002dec
  ldr r2, =_sbss
 8000984:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000988:	200000c8 	.word	0x200000c8

0800098c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_IRQHandler>
	...

08000990 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f000 f931 	bl	8000c08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	200f      	movs	r0, #15
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fee0 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f93b 	bl	8000c56 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295
 80009f8:	f000 f911 	bl	8000c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200000c4 	.word	0x200000c4

08000a5c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	@ (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	@ (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	@ 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	@ 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
	...

08000bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bd4:	d301      	bcc.n	8000bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00f      	b.n	8000bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <SysTick_Config+0x40>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be2:	210f      	movs	r1, #15
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f7ff ff8e 	bl	8000b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <SysTick_Config+0x40>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <SysTick_Config+0x40>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ff47 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b086      	sub	sp, #24
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff5c 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff8e 	bl	8000b5c <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5d 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffb0 	bl	8000bc4 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d101      	bne.n	8000c80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e014      	b.n	8000caa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	791b      	ldrb	r3, [r3, #4]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d105      	bne.n	8000c96 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff fd91 	bl	80007b8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2202      	movs	r2, #2
 8000c9a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000cb2:	b480      	push	{r7}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d104      	bne.n	8000cda <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	795b      	ldrb	r3, [r3, #5]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <HAL_DAC_Start+0x16>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e025      	b.n	8000d52 <HAL_DAC_Start+0x62>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	409a      	lsls	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	430a      	orrs	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8000d30:	2b3c      	cmp	r3, #60	@ 0x3c
 8000d32:	d107      	bne.n	8000d44 <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	685a      	ldr	r2, [r3, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f042 0201 	orr.w	r2, r2, #1
 8000d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2201      	movs	r2, #1
 8000d48:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b087      	sub	sp, #28
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d101      	bne.n	8000d7e <HAL_DAC_ConfigChannel+0x20>
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	e036      	b.n	8000dec <HAL_DAC_ConfigChannel+0x8e>
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2201      	movs	r2, #1
 8000d82:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2202      	movs	r2, #2
 8000d88:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000d92:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6819      	ldr	r1, [r3, #0]
 8000dcc:	22c0      	movs	r2, #192	@ 0xc0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	400a      	ands	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2201      	movs	r2, #1
 8000de2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	371c      	adds	r7, #28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	e14e      	b.n	80010a6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f000 8140 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d005      	beq.n	8000e38 <HAL_GPIO_Init+0x40>
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d017      	beq.n	8000ed6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d123      	bne.n	8000f2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	220f      	movs	r2, #15
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	08da      	lsrs	r2, r3, #3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0203 	and.w	r2, r3, #3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 809a 	beq.w	80010a0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6c:	4b55      	ldr	r3, [pc, #340]	@ (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a54      	ldr	r2, [pc, #336]	@ (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b52      	ldr	r3, [pc, #328]	@ (80010c4 <HAL_GPIO_Init+0x2cc>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f84:	4a50      	ldr	r2, [pc, #320]	@ (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1e0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	@ (80010cc <HAL_GPIO_Init+0x2d4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1dc>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a45      	ldr	r2, [pc, #276]	@ (80010d0 <HAL_GPIO_Init+0x2d8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1d8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a44      	ldr	r2, [pc, #272]	@ (80010d4 <HAL_GPIO_Init+0x2dc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1d4>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fcc:	2305      	movs	r3, #5
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1e2>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fea:	4937      	ldr	r1, [pc, #220]	@ (80010c8 <HAL_GPIO_Init+0x2d0>)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	4b37      	ldr	r3, [pc, #220]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101c:	4a2e      	ldr	r2, [pc, #184]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001046:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001076:	4b18      	ldr	r3, [pc, #96]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109a:	4a0f      	ldr	r2, [pc, #60]	@ (80010d8 <HAL_GPIO_Init+0x2e0>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	fa22 f303 	lsr.w	r3, r2, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f47f aea9 	bne.w	8000e08 <HAL_GPIO_Init+0x10>
  }
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000
 80010cc:	48000400 	.word	0x48000400
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000c00 	.word	0x48000c00
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
 80010e8:	4613      	mov	r3, r2
 80010ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ec:	787b      	ldrb	r3, [r7, #1]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43d9      	mvns	r1, r3
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	400b      	ands	r3, r1
 800112e:	431a      	orrs	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001146:	af00      	add	r7, sp, #0
 8001148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001150:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f001 b823 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800116a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	f000 817d 	beq.w	8001476 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800117c:	4bbc      	ldr	r3, [pc, #752]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b04      	cmp	r3, #4
 8001186:	d00c      	beq.n	80011a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001188:	4bb9      	ldr	r3, [pc, #740]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b08      	cmp	r3, #8
 8001192:	d15c      	bne.n	800124e <HAL_RCC_OscConfig+0x10e>
 8001194:	4bb6      	ldr	r3, [pc, #728]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011a0:	d155      	bne.n	800124e <HAL_RCC_OscConfig+0x10e>
 80011a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011a6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	095b      	lsrs	r3, r3, #5
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_OscConfig+0x94>
 80011ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	e015      	b.n	8001200 <HAL_RCC_OscConfig+0xc0>
 80011d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011d8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80011e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011ec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80011f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80011f4:	fa93 f3a3 	rbit	r3, r3
 80011f8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80011fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001200:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001204:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001208:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800120c:	fa92 f2a2 	rbit	r2, r2
 8001210:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001214:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001218:	fab2 f282 	clz	r2, r2
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	f042 0220 	orr.w	r2, r2, #32
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	f002 021f 	and.w	r2, r2, #31
 8001228:	2101      	movs	r1, #1
 800122a:	fa01 f202 	lsl.w	r2, r1, r2
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 811f 	beq.w	8001474 <HAL_RCC_OscConfig+0x334>
 8001236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 8116 	bne.w	8001474 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	f000 bfaf 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x12e>
 8001260:	4b83      	ldr	r3, [pc, #524]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a82      	ldr	r2, [pc, #520]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e036      	b.n	80012dc <HAL_RCC_OscConfig+0x19c>
 800126e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x158>
 800127e:	4b7c      	ldr	r3, [pc, #496]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a7b      	ldr	r2, [pc, #492]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b79      	ldr	r3, [pc, #484]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a78      	ldr	r2, [pc, #480]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e021      	b.n	80012dc <HAL_RCC_OscConfig+0x19c>
 8001298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x184>
 80012aa:	4b71      	ldr	r3, [pc, #452]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a70      	ldr	r2, [pc, #448]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0x19c>
 80012c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b67      	ldr	r3, [pc, #412]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a66      	ldr	r2, [pc, #408]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012dc:	4b64      	ldr	r3, [pc, #400]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	f023 020f 	bic.w	r2, r3, #15
 80012e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	495f      	ldr	r1, [pc, #380]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d059      	beq.n	80013ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fb9d 	bl	8000a44 <HAL_GetTick>
 800130a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fb98 	bl	8000a44 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b64      	cmp	r3, #100	@ 0x64
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 bf43 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 8001326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800132a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800133a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	095b      	lsrs	r3, r3, #5
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x218>
 8001352:	4b47      	ldr	r3, [pc, #284]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	e015      	b.n	8001384 <HAL_RCC_OscConfig+0x244>
 8001358:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800135c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800136c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001370:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001374:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001384:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001388:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800138c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001390:	fa92 f2a2 	rbit	r2, r2
 8001394:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001398:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800139c:	fab2 f282 	clz	r2, r2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f002 021f 	and.w	r2, r2, #31
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ab      	beq.n	8001310 <HAL_RCC_OscConfig+0x1d0>
 80013b8:	e05d      	b.n	8001476 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb43 	bl	8000a44 <HAL_GetTick>
 80013be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c2:	e00a      	b.n	80013da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fb3e 	bl	8000a44 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	@ 0x64
 80013d2:	d902      	bls.n	80013da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f000 bee9 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 80013da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80013ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	095b      	lsrs	r3, r3, #5
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d102      	bne.n	800140c <HAL_RCC_OscConfig+0x2cc>
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	e015      	b.n	8001438 <HAL_RCC_OscConfig+0x2f8>
 800140c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001410:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001414:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001418:	fa93 f3a3 	rbit	r3, r3
 800141c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001424:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001428:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800142c:	fa93 f3a3 	rbit	r3, r3
 8001430:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <HAL_RCC_OscConfig+0x330>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800143c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001440:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001444:	fa92 f2a2 	rbit	r2, r2
 8001448:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800144c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001450:	fab2 f282 	clz	r2, r2
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	f042 0220 	orr.w	r2, r2, #32
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	f002 021f 	and.w	r2, r2, #31
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	4013      	ands	r3, r2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1ab      	bne.n	80013c4 <HAL_RCC_OscConfig+0x284>
 800146c:	e003      	b.n	8001476 <HAL_RCC_OscConfig+0x336>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 817d 	beq.w	8001786 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800148c:	4ba6      	ldr	r3, [pc, #664]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001498:	4ba3      	ldr	r3, [pc, #652]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d172      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80014a4:	4ba0      	ldr	r3, [pc, #640]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d16c      	bne.n	800158a <HAL_RCC_OscConfig+0x44a>
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80014c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3a0>
 80014da:	4b93      	ldr	r3, [pc, #588]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x3c8>
 80014e0:	2302      	movs	r3, #2
 80014e2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80014f2:	2302      	movs	r3, #2
 80014f4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80014f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001504:	4b88      	ldr	r3, [pc, #544]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	2202      	movs	r2, #2
 800150a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800150e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800151a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <HAL_RCC_OscConfig+0x410>
 800153a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d002      	beq.n	8001550 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	f000 be2e 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b75      	ldr	r3, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	21f8      	movs	r1, #248	@ 0xf8
 8001566:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800156e:	fa91 f1a1 	rbit	r1, r1
 8001572:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001576:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800157a:	fab1 f181 	clz	r1, r1
 800157e:	b2c9      	uxtb	r1, r1
 8001580:	408b      	lsls	r3, r1
 8001582:	4969      	ldr	r1, [pc, #420]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001588:	e0fd      	b.n	8001786 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8088 	beq.w	80016ac <HAL_RCC_OscConfig+0x56c>
 800159c:	2301      	movs	r3, #1
 800159e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80015ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b2:	fab3 f383 	clz	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	461a      	mov	r2, r3
 80015c4:	2301      	movs	r3, #1
 80015c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fa3c 	bl	8000a44 <HAL_GetTick>
 80015cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fa37 	bl	8000a44 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d902      	bls.n	80015e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	f000 bde2 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015f2:	fa93 f3a3 	rbit	r3, r3
 80015f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80015fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fe:	fab3 f383 	clz	r3, r3
 8001602:	b2db      	uxtb	r3, r3
 8001604:	095b      	lsrs	r3, r3, #5
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x4d8>
 8001612:	4b45      	ldr	r3, [pc, #276]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	e013      	b.n	8001640 <HAL_RCC_OscConfig+0x500>
 8001618:	2302      	movs	r3, #2
 800161a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800162a:	2302      	movs	r3, #2
 800162c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001630:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001634:	fa93 f3a3 	rbit	r3, r3
 8001638:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 800163e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001640:	2202      	movs	r2, #2
 8001642:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001646:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800164a:	fa92 f2a2 	rbit	r2, r2
 800164e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001652:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f042 0220 	orr.w	r2, r2, #32
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0af      	beq.n	80015d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b2d      	ldr	r3, [pc, #180]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800167a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	21f8      	movs	r1, #248	@ 0xf8
 8001688:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001690:	fa91 f1a1 	rbit	r1, r1
 8001694:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001698:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800169c:	fab1 f181 	clz	r1, r1
 80016a0:	b2c9      	uxtb	r1, r1
 80016a2:	408b      	lsls	r3, r1
 80016a4:	4920      	ldr	r1, [pc, #128]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
 80016aa:	e06c      	b.n	8001786 <HAL_RCC_OscConfig+0x646>
 80016ac:	2301      	movs	r3, #1
 80016ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80016be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	461a      	mov	r2, r3
 80016d4:	2300      	movs	r3, #0
 80016d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff f9b4 	bl	8000a44 <HAL_GetTick>
 80016dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff f9af 	bl	8000a44 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d902      	bls.n	80016f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f000 bd5a 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800170a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	fab3 f383 	clz	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	095b      	lsrs	r3, r3, #5
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d104      	bne.n	800172c <HAL_RCC_OscConfig+0x5ec>
 8001722:	4b01      	ldr	r3, [pc, #4]	@ (8001728 <HAL_RCC_OscConfig+0x5e8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	e015      	b.n	8001754 <HAL_RCC_OscConfig+0x614>
 8001728:	40021000 	.word	0x40021000
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001744:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001750:	4bc8      	ldr	r3, [pc, #800]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 8001752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001754:	2202      	movs	r2, #2
 8001756:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800175a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800175e:	fa92 f2a2 	rbit	r2, r2
 8001762:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001766:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800176a:	fab2 f282 	clz	r2, r2
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f042 0220 	orr.w	r2, r2, #32
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	f002 021f 	and.w	r2, r2, #31
 800177a:	2101      	movs	r1, #1
 800177c:	fa01 f202 	lsl.w	r2, r1, r2
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ad      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8110 	beq.w	80019bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800179c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d079      	beq.n	80018a0 <HAL_RCC_OscConfig+0x760>
 80017ac:	2301      	movs	r3, #1
 80017ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80017be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	4bab      	ldr	r3, [pc, #684]	@ (8001a78 <HAL_RCC_OscConfig+0x938>)
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	461a      	mov	r2, r3
 80017d2:	2301      	movs	r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff f935 	bl	8000a44 <HAL_GetTick>
 80017da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff f930 	bl	8000a44 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d902      	bls.n	80017f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	f000 bcdb 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001810:	2202      	movs	r2, #2
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001818:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	fa93 f2a3 	rbit	r2, r3
 8001822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001834:	2202      	movs	r2, #2
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	fa93 f2a3 	rbit	r2, r3
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800184e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001850:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 8001852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001858:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800185c:	2102      	movs	r1, #2
 800185e:	6019      	str	r1, [r3, #0]
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	fa93 f1a3 	rbit	r1, r3
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001876:	6019      	str	r1, [r3, #0]
  return result;
 8001878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0a0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x6a0>
 800189e:	e08d      	b.n	80019bc <HAL_RCC_OscConfig+0x87c>
 80018a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018c2:	601a      	str	r2, [r3, #0]
  return result;
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	fab3 f383 	clz	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <HAL_RCC_OscConfig+0x938>)
 80018d8:	4413      	add	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	461a      	mov	r2, r3
 80018de:	2300      	movs	r3, #0
 80018e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7ff f8af 	bl	8000a44 <HAL_GetTick>
 80018e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff f8aa 	bl	8000a44 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d902      	bls.n	8001902 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f000 bc55 	b.w	80021ac <HAL_RCC_OscConfig+0x106c>
 8001902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001906:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001912:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001920:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800192e:	2202      	movs	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	fa93 f2a3 	rbit	r2, r3
 8001940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001952:	2202      	movs	r2, #2
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	fa93 f2a3 	rbit	r2, r3
 8001964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001968:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800196c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 8001970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800197a:	2102      	movs	r1, #2
 800197c:	6019      	str	r1, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f1a3 	rbit	r1, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001990:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001994:	6019      	str	r1, [r3, #0]
  return result;
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d197      	bne.n	80018ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 81a1 	beq.w	8001d14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d8:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d116      	bne.n	8001a12 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	4a22      	ldr	r2, [pc, #136]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b20      	ldr	r3, [pc, #128]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a06:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b1a      	ldr	r3, [pc, #104]	@ (8001a7c <HAL_RCC_OscConfig+0x93c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11a      	bne.n	8001a54 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <HAL_RCC_OscConfig+0x93c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a16      	ldr	r2, [pc, #88]	@ (8001a7c <HAL_RCC_OscConfig+0x93c>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f80b 	bl	8000a44 <HAL_GetTick>
 8001a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a32:	e009      	b.n	8001a48 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a34:	f7ff f806 	bl	8000a44 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b64      	cmp	r3, #100	@ 0x64
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e3b1      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_RCC_OscConfig+0x93c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ef      	beq.n	8001a34 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_OscConfig+0x940>
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a02      	ldr	r2, [pc, #8]	@ (8001a74 <HAL_RCC_OscConfig+0x934>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e03c      	b.n	8001aec <HAL_RCC_OscConfig+0x9ac>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	10908120 	.word	0x10908120
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x96a>
 8001a90:	4bc1      	ldr	r3, [pc, #772]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	4ac0      	ldr	r2, [pc, #768]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	6213      	str	r3, [r2, #32]
 8001a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4abd      	ldr	r2, [pc, #756]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	e020      	b.n	8001aec <HAL_RCC_OscConfig+0x9ac>
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x994>
 8001aba:	4bb7      	ldr	r3, [pc, #732]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4ab6      	ldr	r2, [pc, #728]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4bb4      	ldr	r3, [pc, #720]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4ab3      	ldr	r2, [pc, #716]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x9ac>
 8001ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	4aaf      	ldr	r2, [pc, #700]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6213      	str	r3, [r2, #32]
 8001ae0:	4bad      	ldr	r3, [pc, #692]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4aac      	ldr	r2, [pc, #688]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8081 	beq.w	8001c00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7fe ffa1 	bl	8000a44 <HAL_GetTick>
 8001b02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7fe ff9c 	bl	8000a44 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e345      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b28:	2202      	movs	r2, #2
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b66:	601a      	str	r2, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	095b      	lsrs	r3, r3, #5
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0xa4c>
 8001b86:	4b84      	ldr	r3, [pc, #528]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	e013      	b.n	8001bb4 <HAL_RCC_OscConfig+0xa74>
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001b94:	2202      	movs	r2, #2
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001baa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bb8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	6011      	str	r1, [r2, #0]
 8001bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bc4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fa92 f1a2 	rbit	r1, r2
 8001bce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bd2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001bd6:	6011      	str	r1, [r2, #0]
  return result;
 8001bd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bdc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	fab2 f282 	clz	r2, r2
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	f002 021f 	and.w	r2, r2, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d084      	beq.n	8001b08 <HAL_RCC_OscConfig+0x9c8>
 8001bfe:	e07f      	b.n	8001d00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7fe ff20 	bl	8000a44 <HAL_GetTick>
 8001c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ff1b 	bl	8000a44 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e2c4      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c32:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c4e:	2202      	movs	r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d102      	bne.n	8001c8e <HAL_RCC_OscConfig+0xb4e>
 8001c88:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	e013      	b.n	8001cb6 <HAL_RCC_OscConfig+0xb76>
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001c96:	2202      	movs	r2, #2
 8001c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	6011      	str	r1, [r2, #0]
 8001cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cc6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	fa92 f1a2 	rbit	r1, r2
 8001cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cd4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001cd8:	6011      	str	r1, [r2, #0]
  return result;
 8001cda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cde:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	fab2 f282 	clz	r2, r2
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f002 021f 	and.w	r2, r2, #31
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d184      	bne.n	8001c0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d00:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8242 	beq.w	80021aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <HAL_RCC_OscConfig+0xc58>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	f000 8213 	beq.w	800215a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	f040 8162 	bne.w	800200a <HAL_RCC_OscConfig+0xeca>
 8001d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d58:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	461a      	mov	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fe5a 	bl	8000a44 <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e00c      	b.n	8001db0 <HAL_RCC_OscConfig+0xc70>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7fe fe52 	bl	8000a44 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1fd      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
 8001db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	fa93 f2a3 	rbit	r2, r3
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dd4:	601a      	str	r2, [r3, #0]
  return result;
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0xcba>
 8001df4:	4bb0      	ldr	r3, [pc, #704]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e027      	b.n	8001e4a <HAL_RCC_OscConfig+0xd0a>
 8001dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	4b9c      	ldr	r3, [pc, #624]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e4e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e56:	6011      	str	r1, [r2, #0]
 8001e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e5c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	fa92 f1a2 	rbit	r1, r2
 8001e66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e6e:	6011      	str	r1, [r2, #0]
  return result;
 8001e70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	fab2 f282 	clz	r2, r2
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	f042 0220 	orr.w	r2, r2, #32
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f002 021f 	and.w	r2, r2, #31
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d182      	bne.n	8001d9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e96:	4b88      	ldr	r3, [pc, #544]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	497f      	ldr	r1, [pc, #508]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ec6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ee2:	601a      	str	r2, [r3, #0]
  return result;
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001eec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ef8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	461a      	mov	r2, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fd9e 	bl	8000a44 <HAL_GetTick>
 8001f08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe fd99 	bl	8000a44 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e144      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f46:	601a      	str	r2, [r3, #0]
  return result;
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	095b      	lsrs	r3, r3, #5
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe2c>
 8001f66:	4b54      	ldr	r3, [pc, #336]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	e027      	b.n	8001fbc <HAL_RCC_OscConfig+0xe7c>
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f96:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001fc4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001fc8:	6011      	str	r1, [r2, #0]
 8001fca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	fa92 f1a2 	rbit	r1, r2
 8001fd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fdc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fe6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fab2 f282 	clz	r2, r2
 8001ff0:	b2d2      	uxtb	r2, r2
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f002 021f 	and.w	r2, r2, #31
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	4013      	ands	r3, r2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d082      	beq.n	8001f0e <HAL_RCC_OscConfig+0xdce>
 8002008:	e0cf      	b.n	80021aa <HAL_RCC_OscConfig+0x106a>
 800200a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800201c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800202e:	601a      	str	r2, [r3, #0]
  return result;
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fcf8 	bl	8000a44 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fcf3 	bl	8000a44 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e09e      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
 800206e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002072:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002080:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	fa93 f2a3 	rbit	r2, r3
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002092:	601a      	str	r2, [r3, #0]
  return result;
 8002094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002098:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800209c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d104      	bne.n	80020bc <HAL_RCC_OscConfig+0xf7c>
 80020b2:	4b01      	ldr	r3, [pc, #4]	@ (80020b8 <HAL_RCC_OscConfig+0xf78>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	e029      	b.n	800210c <HAL_RCC_OscConfig+0xfcc>
 80020b8:	40021000 	.word	0x40021000
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80020ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	fa93 f2a3 	rbit	r2, r3
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	4b2b      	ldr	r3, [pc, #172]	@ (80021b8 <HAL_RCC_OscConfig+0x1078>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002110:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002114:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800211e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	fa92 f1a2 	rbit	r1, r2
 8002128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800212c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002130:	6011      	str	r1, [r2, #0]
  return result;
 8002132:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002136:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	fab2 f282 	clz	r2, r2
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	f042 0220 	orr.w	r2, r2, #32
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	f002 021f 	and.w	r2, r2, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d180      	bne.n	800205a <HAL_RCC_OscConfig+0xf1a>
 8002158:	e027      	b.n	80021aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e01e      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800216e:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_RCC_OscConfig+0x1078>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800217a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800217e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	429a      	cmp	r2, r3
 800218c:	d10b      	bne.n	80021a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800218e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002192:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b09e      	sub	sp, #120	@ 0x78
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e162      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021d4:	4b90      	ldr	r3, [pc, #576]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d910      	bls.n	8002204 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 0207 	bic.w	r2, r3, #7
 80021ea:	498b      	ldr	r1, [pc, #556]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b89      	ldr	r3, [pc, #548]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e14a      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b82      	ldr	r3, [pc, #520]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	497f      	ldr	r1, [pc, #508]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80dc 	beq.w	80023e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d13c      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xf6>
 8002238:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800223c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002240:	fa93 f3a3 	rbit	r3, r3
 8002244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d102      	bne.n	8002262 <HAL_RCC_ClockConfig+0xa6>
 800225c:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e00f      	b.n	8002282 <HAL_RCC_ClockConfig+0xc6>
 8002262:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002266:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002274:	663b      	str	r3, [r7, #96]	@ 0x60
 8002276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002278:	fa93 f3a3 	rbit	r3, r3
 800227c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800227e:	4b67      	ldr	r3, [pc, #412]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002286:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800228a:	fa92 f2a2 	rbit	r2, r2
 800228e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002290:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d17b      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0f3      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d13c      	bne.n	8002334 <HAL_RCC_ClockConfig+0x178>
 80022ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d102      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x128>
 80022de:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_ClockConfig+0x148>
 80022e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80022f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002300:	4b46      	ldr	r3, [pc, #280]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002308:	63ba      	str	r2, [r7, #56]	@ 0x38
 800230a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800230c:	fa92 f2a2 	rbit	r2, r2
 8002310:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002314:	fab2 f282 	clz	r2, r2
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f042 0220 	orr.w	r2, r2, #32
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f002 021f 	and.w	r2, r2, #31
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d13a      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0b2      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
 8002334:	2302      	movs	r3, #2
 8002336:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233a:	fa93 f3a3 	rbit	r3, r3
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_RCC_ClockConfig+0x1a0>
 8002356:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e00d      	b.n	8002378 <HAL_RCC_ClockConfig+0x1bc>
 800235c:	2302      	movs	r3, #2
 800235e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	2202      	movs	r2, #2
 800237a:	61ba      	str	r2, [r7, #24]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	fa92 f2a2 	rbit	r2, r2
 8002382:	617a      	str	r2, [r7, #20]
  return result;
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	fab2 f282 	clz	r2, r2
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f042 0220 	orr.w	r2, r2, #32
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f002 021f 	and.w	r2, r2, #31
 8002396:	2101      	movs	r1, #1
 8002398:	fa01 f202 	lsl.w	r2, r1, r2
 800239c:	4013      	ands	r3, r2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e079      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	491a      	ldr	r1, [pc, #104]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7fe fb44 	bl	8000a44 <HAL_GetTick>
 80023bc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fb40 	bl	8000a44 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e061      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <HAL_RCC_ClockConfig+0x260>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d214      	bcs.n	8002420 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 0207 	bic.w	r2, r3, #7
 80023fe:	4906      	ldr	r1, [pc, #24]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <HAL_RCC_ClockConfig+0x25c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d005      	beq.n	8002420 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e040      	b.n	800249a <HAL_RCC_ClockConfig+0x2de>
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242c:	4b1d      	ldr	r3, [pc, #116]	@ (80024a4 <HAL_RCC_ClockConfig+0x2e8>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	491a      	ldr	r1, [pc, #104]	@ (80024a4 <HAL_RCC_ClockConfig+0x2e8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <HAL_RCC_ClockConfig+0x2e8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4912      	ldr	r1, [pc, #72]	@ (80024a4 <HAL_RCC_ClockConfig+0x2e8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800245e:	f000 f829 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002462:	4601      	mov	r1, r0
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <HAL_RCC_ClockConfig+0x2e8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800246c:	22f0      	movs	r2, #240	@ 0xf0
 800246e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	fa92 f2a2 	rbit	r2, r2
 8002476:	60fa      	str	r2, [r7, #12]
  return result;
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	40d3      	lsrs	r3, r2
 8002482:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <HAL_RCC_ClockConfig+0x2ec>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	fa21 f303 	lsr.w	r3, r1, r3
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_RCC_ClockConfig+0x2f0>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <HAL_RCC_ClockConfig+0x2f4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fa92 	bl	80009bc <HAL_InitTick>
  
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3778      	adds	r7, #120	@ 0x78
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08002dac 	.word	0x08002dac
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000004 	.word	0x20000004

080024b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x30>
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x36>
 80024e2:	e026      	b.n	8002532 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	e026      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0c9b      	lsrs	r3, r3, #18
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a17      	ldr	r2, [pc, #92]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80024f8:	4b13      	ldr	r3, [pc, #76]	@ (8002548 <HAL_RCC_GetSysClockFreq+0x94>)
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002510:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	fbb2 f2f3 	udiv	r2, r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	fb02 f303 	mul.w	r3, r2, r3
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e004      	b.n	800252c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
      break;
 8002530:	e002      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_RCC_GetSysClockFreq+0x98>)
 8002534:	613b      	str	r3, [r7, #16]
      break;
 8002536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002538:	693b      	ldr	r3, [r7, #16]
}
 800253a:	4618      	mov	r0, r3
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	007a1200 	.word	0x007a1200
 8002550:	08002dc4 	.word	0x08002dc4
 8002554:	08002dd4 	.word	0x08002dd4
 8002558:	003d0900 	.word	0x003d0900

0800255c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	20000000 	.word	0x20000000

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800257a:	f7ff ffef 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257e:	4601      	mov	r1, r0
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002588:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800258c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	603a      	str	r2, [r7, #0]
  return result;
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	40d3      	lsrs	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08002dbc 	.word	0x08002dbc

080025b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025be:	f7ff ffcd 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025c2:	4601      	mov	r1, r0
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80025cc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80025d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	603a      	str	r2, [r7, #0]
  return result;
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	40d3      	lsrs	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08002dbc 	.word	0x08002dbc

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e040      	b.n	8002690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f908 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f95e 	bl	8002904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f825 	bl	8002698 <UART_SetConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01b      	b.n	8002690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f9dd 	bl	8002a48 <UART_CheckIdleState>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b8a      	ldr	r3, [pc, #552]	@ (80028ec <UART_SetConfig+0x254>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68da      	ldr	r2, [r3, #12]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a78      	ldr	r2, [pc, #480]	@ (80028f0 <UART_SetConfig+0x258>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d120      	bne.n	8002756 <UART_SetConfig+0xbe>
 8002714:	4b77      	ldr	r3, [pc, #476]	@ (80028f4 <UART_SetConfig+0x25c>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b03      	cmp	r3, #3
 800271e:	d817      	bhi.n	8002750 <UART_SetConfig+0xb8>
 8002720:	a201      	add	r2, pc, #4	@ (adr r2, 8002728 <UART_SetConfig+0x90>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	08002739 	.word	0x08002739
 800272c:	08002745 	.word	0x08002745
 8002730:	0800274b 	.word	0x0800274b
 8002734:	0800273f 	.word	0x0800273f
 8002738:	2300      	movs	r3, #0
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	e01d      	b.n	800277a <UART_SetConfig+0xe2>
 800273e:	2302      	movs	r3, #2
 8002740:	77fb      	strb	r3, [r7, #31]
 8002742:	e01a      	b.n	800277a <UART_SetConfig+0xe2>
 8002744:	2304      	movs	r3, #4
 8002746:	77fb      	strb	r3, [r7, #31]
 8002748:	e017      	b.n	800277a <UART_SetConfig+0xe2>
 800274a:	2308      	movs	r3, #8
 800274c:	77fb      	strb	r3, [r7, #31]
 800274e:	e014      	b.n	800277a <UART_SetConfig+0xe2>
 8002750:	2310      	movs	r3, #16
 8002752:	77fb      	strb	r3, [r7, #31]
 8002754:	e011      	b.n	800277a <UART_SetConfig+0xe2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a67      	ldr	r2, [pc, #412]	@ (80028f8 <UART_SetConfig+0x260>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d102      	bne.n	8002766 <UART_SetConfig+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e009      	b.n	800277a <UART_SetConfig+0xe2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a64      	ldr	r2, [pc, #400]	@ (80028fc <UART_SetConfig+0x264>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d102      	bne.n	8002776 <UART_SetConfig+0xde>
 8002770:	2300      	movs	r3, #0
 8002772:	77fb      	strb	r3, [r7, #31]
 8002774:	e001      	b.n	800277a <UART_SetConfig+0xe2>
 8002776:	2310      	movs	r3, #16
 8002778:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002782:	d15a      	bne.n	800283a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d827      	bhi.n	80027da <UART_SetConfig+0x142>
 800278a:	a201      	add	r2, pc, #4	@ (adr r2, 8002790 <UART_SetConfig+0xf8>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080027b5 	.word	0x080027b5
 8002794:	080027bd 	.word	0x080027bd
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027db 	.word	0x080027db
 80027a0:	080027cb 	.word	0x080027cb
 80027a4:	080027db 	.word	0x080027db
 80027a8:	080027db 	.word	0x080027db
 80027ac:	080027db 	.word	0x080027db
 80027b0:	080027d3 	.word	0x080027d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027b4:	f7ff fede 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 80027b8:	61b8      	str	r0, [r7, #24]
        break;
 80027ba:	e013      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027bc:	f7ff fefc 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 80027c0:	61b8      	str	r0, [r7, #24]
        break;
 80027c2:	e00f      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002900 <UART_SetConfig+0x268>)
 80027c6:	61bb      	str	r3, [r7, #24]
        break;
 80027c8:	e00c      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027ca:	f7ff fe73 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 80027ce:	61b8      	str	r0, [r7, #24]
        break;
 80027d0:	e008      	b.n	80027e4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027d6:	61bb      	str	r3, [r7, #24]
        break;
 80027d8:	e004      	b.n	80027e4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	77bb      	strb	r3, [r7, #30]
        break;
 80027e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d074      	beq.n	80028d4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	005a      	lsls	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	085b      	lsrs	r3, r3, #1
 80027f4:	441a      	add	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b0f      	cmp	r3, #15
 8002804:	d916      	bls.n	8002834 <UART_SetConfig+0x19c>
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800280c:	d212      	bcs.n	8002834 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	b29b      	uxth	r3, r3
 8002812:	f023 030f 	bic.w	r3, r3, #15
 8002816:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	b29a      	uxth	r2, r3
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	4313      	orrs	r3, r2
 8002828:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	89fa      	ldrh	r2, [r7, #14]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	e04f      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	77bb      	strb	r3, [r7, #30]
 8002838:	e04c      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800283a:	7ffb      	ldrb	r3, [r7, #31]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d828      	bhi.n	8002892 <UART_SetConfig+0x1fa>
 8002840:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <UART_SetConfig+0x1b0>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002875 	.word	0x08002875
 8002850:	0800287d 	.word	0x0800287d
 8002854:	08002893 	.word	0x08002893
 8002858:	08002883 	.word	0x08002883
 800285c:	08002893 	.word	0x08002893
 8002860:	08002893 	.word	0x08002893
 8002864:	08002893 	.word	0x08002893
 8002868:	0800288b 	.word	0x0800288b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800286c:	f7ff fe82 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8002870:	61b8      	str	r0, [r7, #24]
        break;
 8002872:	e013      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002874:	f7ff fea0 	bl	80025b8 <HAL_RCC_GetPCLK2Freq>
 8002878:	61b8      	str	r0, [r7, #24]
        break;
 800287a:	e00f      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800287c:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <UART_SetConfig+0x268>)
 800287e:	61bb      	str	r3, [r7, #24]
        break;
 8002880:	e00c      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002882:	f7ff fe17 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8002886:	61b8      	str	r0, [r7, #24]
        break;
 8002888:	e008      	b.n	800289c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800288a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800288e:	61bb      	str	r3, [r7, #24]
        break;
 8002890:	e004      	b.n	800289c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	77bb      	strb	r3, [r7, #30]
        break;
 800289a:	bf00      	nop
    }

    if (pclk != 0U)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085a      	lsrs	r2, r3, #1
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	441a      	add	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d909      	bls.n	80028d0 <UART_SetConfig+0x238>
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c2:	d205      	bcs.n	80028d0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	e001      	b.n	80028d4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80028e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	efff69f3 	.word	0xefff69f3
 80028f0:	40013800 	.word	0x40013800
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40004400 	.word	0x40004400
 80028fc:	40004800 	.word	0x40004800
 8002900:	007a1200 	.word	0x007a1200

08002904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01a      	beq.n	8002a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a02:	d10a      	bne.n	8002a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	605a      	str	r2, [r3, #4]
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b098      	sub	sp, #96	@ 0x60
 8002a4c:	af02      	add	r7, sp, #8
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a58:	f7fd fff4 	bl	8000a44 <HAL_GetTick>
 8002a5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d12e      	bne.n	8002aca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a74:	2200      	movs	r2, #0
 8002a76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f88c 	bl	8002b98 <UART_WaitOnFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d021      	beq.n	8002aca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8e:	e853 3f00 	ldrex	r3, [r3]
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002aaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002aac:	e841 2300 	strex	r3, r2, [r1]
 8002ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e6      	bne.n	8002a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e062      	b.n	8002b90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d149      	bne.n	8002b6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f856 	bl	8002b98 <UART_WaitOnFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03c      	beq.n	8002b6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	623b      	str	r3, [r7, #32]
   return(result);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e6      	bne.n	8002af2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3308      	adds	r3, #8
 8002b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0301 	bic.w	r3, r3, #1
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3308      	adds	r3, #8
 8002b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b44:	61fa      	str	r2, [r7, #28]
 8002b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	69b9      	ldr	r1, [r7, #24]
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	617b      	str	r3, [r7, #20]
   return(result);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e5      	bne.n	8002b24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e011      	b.n	8002b90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3758      	adds	r7, #88	@ 0x58
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	e04f      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d04b      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fd ff47 	bl	8000a44 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e04e      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d037      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b80      	cmp	r3, #128	@ 0x80
 8002bde:	d034      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	d031      	beq.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d110      	bne.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f838 	bl	8002c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2208      	movs	r2, #8
 8002c06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e029      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c24:	d111      	bne.n	8002c4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f81e 	bl	8002c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e00f      	b.n	8002c6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4013      	ands	r3, r2
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	bf0c      	ite	eq
 8002c5a:	2301      	moveq	r3, #1
 8002c5c:	2300      	movne	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d0a0      	beq.n	8002baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b095      	sub	sp, #84	@ 0x54
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c98:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e6      	bne.n	8002c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cd4:	e841 2300 	strex	r3, r2, [r1]
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e5      	bne.n	8002cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d118      	bne.n	8002d1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 0310 	bic.w	r3, r3, #16
 8002cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d06:	61bb      	str	r3, [r7, #24]
 8002d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	613b      	str	r3, [r7, #16]
   return(result);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e6      	bne.n	8002ce8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d2e:	bf00      	nop
 8002d30:	3754      	adds	r7, #84	@ 0x54
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <memset>:
 8002d3a:	4402      	add	r2, r0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d100      	bne.n	8002d44 <memset+0xa>
 8002d42:	4770      	bx	lr
 8002d44:	f803 1b01 	strb.w	r1, [r3], #1
 8002d48:	e7f9      	b.n	8002d3e <memset+0x4>
	...

08002d4c <__libc_init_array>:
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d84 <__libc_init_array+0x38>)
 8002d50:	4c0d      	ldr	r4, [pc, #52]	@ (8002d88 <__libc_init_array+0x3c>)
 8002d52:	1b64      	subs	r4, r4, r5
 8002d54:	10a4      	asrs	r4, r4, #2
 8002d56:	2600      	movs	r6, #0
 8002d58:	42a6      	cmp	r6, r4
 8002d5a:	d109      	bne.n	8002d70 <__libc_init_array+0x24>
 8002d5c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d8c <__libc_init_array+0x40>)
 8002d5e:	4c0c      	ldr	r4, [pc, #48]	@ (8002d90 <__libc_init_array+0x44>)
 8002d60:	f000 f818 	bl	8002d94 <_init>
 8002d64:	1b64      	subs	r4, r4, r5
 8002d66:	10a4      	asrs	r4, r4, #2
 8002d68:	2600      	movs	r6, #0
 8002d6a:	42a6      	cmp	r6, r4
 8002d6c:	d105      	bne.n	8002d7a <__libc_init_array+0x2e>
 8002d6e:	bd70      	pop	{r4, r5, r6, pc}
 8002d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d74:	4798      	blx	r3
 8002d76:	3601      	adds	r6, #1
 8002d78:	e7ee      	b.n	8002d58 <__libc_init_array+0xc>
 8002d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d7e:	4798      	blx	r3
 8002d80:	3601      	adds	r6, #1
 8002d82:	e7f2      	b.n	8002d6a <__libc_init_array+0x1e>
 8002d84:	08002de4 	.word	0x08002de4
 8002d88:	08002de4 	.word	0x08002de4
 8002d8c:	08002de4 	.word	0x08002de4
 8002d90:	08002de8 	.word	0x08002de8

08002d94 <_init>:
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d96:	bf00      	nop
 8002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d9a:	bc08      	pop	{r3}
 8002d9c:	469e      	mov	lr, r3
 8002d9e:	4770      	bx	lr

08002da0 <_fini>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr
